import { TypeCompiler, TypeCheck } from '@sinclair/typebox/compiler';
import { Value } from '@sinclair/typebox/value';
import { IsEvalSupported } from './environment.mjs';
import { Validator } from './validator.mjs';
import { TypeBox } from '../typebox/typebox.mjs';
import * as t from '@sinclair/typebox';
import * as g from '../guard.mjs';
// ------------------------------------------------------------------
// CompileDynamic
// ------------------------------------------------------------------
// prettier-ignore
function CompileDynamic(type, references = []) {
    return new TypeCheck(type, references, value => Value.Check(type, references, value), TypeCompiler.Code(type, references));
}
// ------------------------------------------------------------------
// ResolveTypeCheck
// ------------------------------------------------------------------
function ResolveTypeCheck(type) {
    return IsEvalSupported() ? TypeCompiler.Compile(type) : CompileDynamic(type);
}
/** Compiles a type for high performance validation */
// prettier-ignore
export function Compile(...args) {
    const [parameter, type, options] = g.Signature(args);
    const schema = t.ValueGuard.IsString(type) ? TypeBox(parameter, type, options) : TypeBox(type);
    const check = ResolveTypeCheck(schema);
    return new Validator(check);
}
