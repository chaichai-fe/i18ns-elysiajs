import { Value } from '@sinclair/typebox/value';
import { ZodPathFromJsonPointer } from './path.mjs';
// ------------------------------------------------------------------
// StandardSchemaProps<Input, Output>
// ------------------------------------------------------------------
// prettier-ignore
export class StandardSchemaProps {
    constructor(check) {
        this.__check = check;
    }
    // ----------------------------------------------------------------
    // StandardSchemaV1.Props<Input, Output>
    // ----------------------------------------------------------------
    get vendor() {
        return '@sinclair/typemap';
    }
    get version() {
        return 1;
    }
    get types() {
        throw Error('types is a phantom property used for inference only.');
    }
    validate(value) {
        return (this.__check.Check(value) ? this.__createValue(value) : this.__createIssues(value));
    }
    // ----------------------------------------------------------------
    // Internal
    // ----------------------------------------------------------------
    __createIssues(value) {
        const errors = [...Value.Errors(this.__check.Schema(), value)];
        const issues = errors.map((error) => ({ ...error, path: ZodPathFromJsonPointer(error.path) }));
        return { issues };
    }
    __createValue(value) {
        return { value };
    }
}
// ------------------------------------------------------------------
// Validator<TSchema>
// ------------------------------------------------------------------
export class Validator {
    constructor(check) {
        this.__standard = new StandardSchemaProps(check);
        this.__check = check;
    }
    /** Standard Schema Interface */
    get ['~standard']() {
        return this.__standard;
    }
    /** Returns the code used by this validator. */
    Code() {
        return this.__check.Code();
    }
    /** Parses this value. Do not use this function for high throughput validation */
    Parse(value) {
        return Value.Parse(this.__check.Schema(), value);
    }
    /** Checks if this value matches the type */
    Check(value) {
        return this.__check.Check(value);
    }
    /** Returns errors for this value */
    Errors(value) {
        return this.__check.Errors(value);
    }
}
