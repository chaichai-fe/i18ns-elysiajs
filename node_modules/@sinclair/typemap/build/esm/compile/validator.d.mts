import { TypeCheck, ValueErrorIterator } from '@sinclair/typebox/compiler';
import * as t from '@sinclair/typebox';
import * as s from './standard.mjs';
export declare class StandardSchemaProps<Type extends t.TSchema, Static = t.Static<Type>, Input extends Static = Static, Output extends Static = Static> implements s.StandardSchemaV1.Props<Input, Output> {
    private readonly __check;
    constructor(check: TypeCheck<Type>);
    get vendor(): '@sinclair/typemap';
    get version(): 1;
    get types(): {
        input: Input;
        output: Output;
    };
    validate(value: unknown): s.StandardSchemaV1.Result<Output>;
    private __createIssues;
    private __createValue;
}
export declare class Validator<Type extends t.TSchema> implements s.StandardSchemaV1<t.Static<Type>, t.Static<Type>> {
    private readonly __standard;
    private readonly __check;
    constructor(check: TypeCheck<Type>);
    /** Standard Schema Interface */
    get ['~standard'](): StandardSchemaProps<Type>;
    /** Returns the code used by this validator. */
    Code(): string;
    /** Parses this value. Do not use this function for high throughput validation */
    Parse(value: unknown): t.StaticDecode<Type>;
    /** Checks if this value matches the type */
    Check(value: unknown): value is t.Static<Type>;
    /** Returns errors for this value */
    Errors(value: unknown): ValueErrorIterator;
}
