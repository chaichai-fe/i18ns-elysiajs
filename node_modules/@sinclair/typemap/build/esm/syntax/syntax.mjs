import { SyntaxFromSyntax } from './syntax-from-syntax.mjs';
import { SyntaxFromTypeBox } from './syntax-from-typebox.mjs';
import { SyntaxFromValibot } from './syntax-from-valibot.mjs';
import { SyntaxFromZod } from './syntax-from-zod.mjs';
import * as g from '../guard.mjs';
import * as z from 'zod';
/** Creates Syntax by mapping from a remote Type */
// prettier-ignore
export function Syntax(...args) {
    const [_parameter, type, _options] = g.Signature(args);
    return (g.IsSyntax(type) ? SyntaxFromSyntax(type) :
        g.IsTypeBox(type) ? SyntaxFromTypeBox(type) :
            g.IsValibot(type) ? SyntaxFromValibot(type) :
                g.IsZod(type) ? SyntaxFromZod(type) :
                    z.never());
}
