import { ZodFromSyntax } from './zod-from-syntax.mjs';
import { ZodFromTypeBox } from './zod-from-typebox.mjs';
import { ZodFromValibot } from './zod-from-valibot.mjs';
import { ZodFromZod } from './zod-from-zod.mjs';
import { ContextFromParameter } from '../typebox/typebox.mjs';
import * as g from '../guard.mjs';
import * as z from 'zod';
/** Creates a Zod type by mapping from a remote Type */
// prettier-ignore
export function Zod(...args) {
    const [parameter, type, options] = g.Signature(args);
    return (g.IsSyntax(type) ? ZodFromSyntax(ContextFromParameter(parameter), type, options) :
        g.IsTypeBox(type) ? ZodFromTypeBox(type) :
            g.IsValibot(type) ? ZodFromValibot(type) :
                g.IsZod(type) ? ZodFromZod(type) :
                    z.never());
}
