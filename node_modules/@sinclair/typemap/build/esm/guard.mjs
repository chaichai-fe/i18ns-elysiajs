import * as t from '@sinclair/typebox';
// ------------------------------------------------------------------
// Syntax
// ------------------------------------------------------------------
/** Returns true if the given value is a Syntax type */
export function IsSyntax(value) {
    return t.ValueGuard.IsString(value);
}
// ------------------------------------------------------------------
// TypeBox
// ------------------------------------------------------------------
/** Returns true if the given value is a TypeBox type */
export function IsTypeBox(type) {
    return t.KindGuard.IsSchema(type);
}
// ------------------------------------------------------------------
// Valibot
// ------------------------------------------------------------------
/** Returns true if the given value is a Valibot type */
// prettier-ignore
export function IsValibot(type) {
    return (t.ValueGuard.IsObject(type) &&
        t.ValueGuard.HasPropertyKey(type, '~standard') &&
        t.ValueGuard.IsObject(type['~standard']) &&
        t.ValueGuard.HasPropertyKey(type['~standard'], 'vendor') &&
        type['~standard'].vendor === 'valibot');
}
// ------------------------------------------------------------------
// Zod
// ------------------------------------------------------------------
/** Returns true if the given value is a Zod type */
// prettier-ignore
export function IsZod(type) {
    return (t.ValueGuard.IsObject(type) &&
        t.ValueGuard.HasPropertyKey(type, '~standard') &&
        t.ValueGuard.IsObject(type['~standard']) &&
        t.ValueGuard.HasPropertyKey(type['~standard'], 'vendor') &&
        type['~standard'].vendor === 'zod');
}
// ------------------------------------------------------------------
// Signature
// ------------------------------------------------------------------
// (parameter, syntax, options)
function Signature1(args) {
    return args.length === 3 && t.ValueGuard.IsObject(args[0]) && t.ValueGuard.IsString(args[1]) && t.ValueGuard.IsObject(args[2]);
}
// (syntax, options)
function Signature2(args) {
    return args.length === 2 && t.ValueGuard.IsString(args[0]) && t.ValueGuard.IsObject(args[1]);
}
// (parameter, options)
function Signature3(args) {
    return args.length === 2 && t.ValueGuard.IsObject(args[0]) && t.ValueGuard.IsString(args[1]);
}
// (syntax | type)
function Signature4(args) {
    return args.length === 1 && (t.ValueGuard.IsString(args[0]) || t.ValueGuard.IsObject(args[0]));
}
/** Resolve common mapping signature parameters */
// prettier-ignore
export function Signature(args) {
    return (Signature1(args) ? [args[0], args[1], args[2]] :
        Signature2(args) ? [{}, args[0], args[1]] :
            Signature3(args) ? [args[0], args[1], {}] :
                Signature4(args) ? [{}, args[0], {}] :
                    [{}, 'never', {}]);
}
