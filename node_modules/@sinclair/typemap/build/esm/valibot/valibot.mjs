import { ValibotFromSyntax } from './valibot-from-syntax.mjs';
import { ValibotFromTypeBox } from './valibot-from-typebox.mjs';
import { ValibotFromValibot } from './valibot-from-valibot.mjs';
import { ValibotFromZod } from './valibot-from-zod.mjs';
import { ContextFromParameter } from '../typebox/typebox.mjs';
import * as g from '../guard.mjs';
import * as v from 'valibot';
/** Creates a Valibot type by mapping from a remote Type */
// prettier-ignore
export function Valibot(...args) {
    const [parameter, type, options] = g.Signature(args);
    return (g.IsSyntax(type) ? ValibotFromSyntax(ContextFromParameter(parameter), type, options) :
        g.IsTypeBox(type) ? ValibotFromTypeBox(type) :
            g.IsValibot(type) ? ValibotFromValibot(type) :
                g.IsZod(type) ? ValibotFromZod(type) :
                    v.never());
}
