import { TypeBoxFromSyntax } from './typebox-from-syntax.mjs';
import { TypeBoxFromTypeBox } from './typebox-from-typebox.mjs';
import { TypeBoxFromValibot } from './typebox-from-valibot.mjs';
import { TypeBoxFromZod } from './typebox-from-zod.mjs';
import * as g from '../guard.mjs';
import * as t from '@sinclair/typebox';
// prettier-ignore
export function ContextFromParameter(parameter) {
    return globalThis.Object.getOwnPropertyNames(parameter).reduce((result, key) => {
        return { ...result, [key]: TypeBox(parameter[key]) };
    }, {});
}
/** Creates a TypeBox type by mapping from a remote Type */
// prettier-ignore
export function TypeBox(...args) {
    const [parameter, type, options] = g.Signature(args);
    return (g.IsSyntax(type) ? TypeBoxFromSyntax(ContextFromParameter(parameter), type, options) :
        g.IsTypeBox(type) ? TypeBoxFromTypeBox(type) :
            g.IsValibot(type) ? TypeBoxFromValibot(type) :
                g.IsZod(type) ? TypeBoxFromZod(type) :
                    t.Never());
}
/** Creates a TypeBox type from Syntax or another Type */
// prettier-ignore
export function Type(...args) {
    return TypeBox.apply(null, args);
}
