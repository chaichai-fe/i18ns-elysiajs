import { type TZodFromSyntax } from './zod-from-syntax';
import { type TZodFromTypeBox } from './zod-from-typebox';
import { type TZodFromValibot } from './zod-from-valibot';
import { type TZodFromZod } from './zod-from-zod';
import { type TSyntaxOptions } from '../options';
import { type TParameter, type TContextFromParameter } from '../typebox/typebox';
import * as g from '../guard';
import * as z from 'zod';
/** Creates a Zod type by mapping from a remote Type */
export type TZod<Parameter extends TParameter, Type extends object | string, Result extends z.ZodTypeAny | z.ZodEffects<any> = (Type extends g.SyntaxType ? TZodFromSyntax<TContextFromParameter<Parameter>, Type> : Type extends g.TypeBoxType ? TZodFromTypeBox<Type> : Type extends g.ValibotType ? TZodFromValibot<Type> : Type extends g.ZodType ? TZodFromZod<Type> : z.ZodNever)> = Result;
/** Creates a Zod type by mapping from a remote Type */
export declare function Zod<Parameter extends TParameter, Type extends string>(parameter: Parameter, type: Type, options?: TSyntaxOptions): TZod<Parameter, Type>;
/** Creates a Zod type by mapping from a remote Type */
export declare function Zod<Type extends string>(type: Type, options?: TSyntaxOptions): TZod<{}, Type>;
/** Creates a Zod type by mapping from a remote Type */
export declare function Zod<Type extends object>(type: Type, options?: TSyntaxOptions): TZod<{}, Type>;
