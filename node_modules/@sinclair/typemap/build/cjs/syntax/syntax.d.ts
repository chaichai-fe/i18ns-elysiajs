import { type TSyntaxFromSyntax } from './syntax-from-syntax';
import { type TSyntaxFromTypeBox } from './syntax-from-typebox';
import { type TSyntaxFromValibot } from './syntax-from-valibot';
import { type TSyntaxFromZod } from './syntax-from-zod';
import { type TSyntaxOptions } from '../options';
import { type TParameter } from '../typebox/typebox';
import * as g from '../guard';
/** Creates Syntax by mapping from a remote Type */
export type TSyntax<_Parameter extends TParameter, Type extends object | string, Result extends string = (Type extends g.SyntaxType ? TSyntaxFromSyntax<Type> : Type extends g.TypeBoxType ? TSyntaxFromTypeBox<Type> : Type extends g.ValibotType ? TSyntaxFromValibot<Type> : Type extends g.ZodType ? TSyntaxFromZod<Type> : 'never')> = Result;
/** Creates Syntax by mapping from a remote Type */
export declare function Syntax<Parameter extends TParameter, Type extends string>(parameter: Parameter, type: Type, options?: TSyntaxOptions): TSyntax<Parameter, Type>;
/** Creates Syntax by mapping from a remote Type */
export declare function Syntax<Type extends string>(type: Type, options?: TSyntaxOptions): TSyntax<{}, Type>;
/** Creates Syntax by mapping from a remote Type */
export declare function Syntax<Type extends object>(type: Type, options?: TSyntaxOptions): TSyntax<{}, Type>;
