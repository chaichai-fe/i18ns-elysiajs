import { type TValibotFromSyntax } from './valibot-from-syntax';
import { type TValibotFromTypeBox } from './valibot-from-typebox';
import { type TValibotFromValibot } from './valibot-from-valibot';
import { type TValibotFromZod } from './valibot-from-zod';
import { type TSyntaxOptions } from '../options';
import { type TParameter, type TContextFromParameter } from '../typebox/typebox';
import * as g from '../guard';
import * as t from '@sinclair/typebox';
import * as v from 'valibot';
import * as c from './common';
/** Creates a Valibot type by mapping from a remote Type */
export type TValibot<Parameter extends TParameter, Type extends object | string, Result extends g.ValibotType = (Type extends g.SyntaxType ? TValibotFromSyntax<TContextFromParameter<Parameter>, Type> : Type extends t.TSchema ? TValibotFromTypeBox<Type> : Type extends g.ValibotType ? TValibotFromValibot<Type> : Type extends g.ZodType ? TValibotFromZod<Type> : v.NeverSchema<c.BaseError>)> = Result;
/** Creates a Valibot type by mapping from a remote Type */
export declare function Valibot<Parameter extends TParameter, Type extends string>(parameter: Parameter, type: Type, options?: TSyntaxOptions): TValibot<Parameter, Type>;
/** Creates a Valibot type by mapping from a remote Type */
export declare function Valibot<Type extends string>(type: Type, options?: TSyntaxOptions): TValibot<{}, Type>;
/** Creates a Valibot type by mapping from a remote Type */
export declare function Valibot<Type extends object>(type: Type, options?: TSyntaxOptions): TValibot<{}, Type>;
