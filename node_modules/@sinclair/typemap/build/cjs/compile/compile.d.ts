import { Validator } from './validator';
import { type TTypeBox } from '../typebox/typebox';
import { type TSyntaxOptions } from '../options';
import { type TParameter } from '../typebox/typebox';
import * as t from '@sinclair/typebox';
/** Compiles a type for high performance validation */
type TCompile<Paramter extends TParameter, Type extends object | string, Schema extends t.TSchema = TTypeBox<Paramter, Type>, Result = Validator<Schema>> = Result;
/** Compiles a type for high performance validation */
export declare function Compile<Parameter extends TParameter, Type extends string>(parameter: Parameter, type: Type, options?: TSyntaxOptions): TCompile<Parameter, Type>;
/** Compiles a type for high performance validation */
export declare function Compile<Type extends string>(type: Type, options?: TSyntaxOptions): TCompile<{}, Type>;
/** Compiles a type for high performance validation */
export declare function Compile<Type extends object>(type: Type, options?: TSyntaxOptions): TCompile<{}, Type>;
export {};
