import { type TTypeBoxFromSyntax } from './typebox-from-syntax';
import { type TTypeBoxFromTypeBox } from './typebox-from-typebox';
import { type TTypeBoxFromValibot } from './typebox-from-valibot';
import { type TTypeBoxFromZod } from './typebox-from-zod';
import { type TSyntaxOptions } from '../options';
import * as g from '../guard';
import * as t from '@sinclair/typebox';
export type TParameter = Record<PropertyKey, object>;
export type TContextFromParameter<Parameter extends TParameter, Result extends t.TProperties = {
    [Key in keyof Parameter]: TTypeBox<{}, Parameter[Key]>;
}> = Result;
export declare function ContextFromParameter<Parameter extends TParameter>(parameter: Parameter): TContextFromParameter<Parameter>;
/** Creates a TypeBox type by mapping from a remote Type */
export type TTypeBox<Parameter extends TParameter, Type extends object | string, Result = (Type extends g.SyntaxType ? TTypeBoxFromSyntax<TContextFromParameter<Parameter>, Type> : Type extends g.TypeBoxType ? TTypeBoxFromTypeBox<Type> : Type extends g.ValibotType ? TTypeBoxFromValibot<Type> : Type extends g.ZodType ? TTypeBoxFromZod<Type> : t.TNever)> = Result;
/** Creates a TypeBox type by mapping from a remote Type */
export declare function TypeBox<Parameter extends TParameter, Type extends string>(parameter: Parameter, type: Type, options?: TSyntaxOptions): TTypeBox<Parameter, Type>;
/** Creates a TypeBox type by mapping from a remote Type */
export declare function TypeBox<Type extends object | string>(type: Type, options?: TSyntaxOptions): TTypeBox<{}, Type>;
/** Creates a TypeBox type from Syntax or another Type */
export declare function Type<Parameter extends TParameter, Type extends string>(parameter: Parameter, type: Type, options?: TSyntaxOptions): TTypeBox<Parameter, Type>;
/** Creates a TypeBox type from Syntax or another Type */
export declare function Type<Type extends object | string>(type: Type, options?: TSyntaxOptions): TTypeBox<{}, Type>;
