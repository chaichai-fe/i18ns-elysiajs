"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextFromParameter = ContextFromParameter;
exports.TypeBox = TypeBox;
exports.Type = Type;
const typebox_from_syntax_1 = require("./typebox-from-syntax");
const typebox_from_typebox_1 = require("./typebox-from-typebox");
const typebox_from_valibot_1 = require("./typebox-from-valibot");
const typebox_from_zod_1 = require("./typebox-from-zod");
const g = require("../guard");
const t = require("@sinclair/typebox");
// prettier-ignore
function ContextFromParameter(parameter) {
    return globalThis.Object.getOwnPropertyNames(parameter).reduce((result, key) => {
        return { ...result, [key]: TypeBox(parameter[key]) };
    }, {});
}
/** Creates a TypeBox type by mapping from a remote Type */
// prettier-ignore
function TypeBox(...args) {
    const [parameter, type, options] = g.Signature(args);
    return (g.IsSyntax(type) ? (0, typebox_from_syntax_1.TypeBoxFromSyntax)(ContextFromParameter(parameter), type, options) :
        g.IsTypeBox(type) ? (0, typebox_from_typebox_1.TypeBoxFromTypeBox)(type) :
            g.IsValibot(type) ? (0, typebox_from_valibot_1.TypeBoxFromValibot)(type) :
                g.IsZod(type) ? (0, typebox_from_zod_1.TypeBoxFromZod)(type) :
                    t.Never());
}
/** Creates a TypeBox type from Syntax or another Type */
// prettier-ignore
function Type(...args) {
    return TypeBox.apply(null, args);
}
