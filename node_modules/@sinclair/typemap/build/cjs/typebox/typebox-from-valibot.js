"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeBoxFromValibot = TypeBoxFromValibot;
const t = require("@sinclair/typebox");
const v = require("valibot");
// ------------------------------------------------------------------
// Options
// ------------------------------------------------------------------
function IsSchemaWithPipe(type) {
    return t.ValueGuard.IsObject(type) && t.ValueGuard.HasPropertyKey(type, 'pipe') && t.ValueGuard.IsArray(type.pipe);
}
// prettier-ignore
function Options(type) {
    if (!IsSchemaWithPipe(type))
        return {};
    return type.pipe.slice(1).reduce((options, action) => {
        return {
            ...options, ...(action.type === 'args' ? {} :
                action.type === 'base64' ? { format: 'base64' } :
                    action.type === 'bic' ? { format: 'bic' } :
                        action.type === 'brand' ? {} :
                            action.type === 'bytes' ? {} :
                                action.type === 'check' ? {} :
                                    action.type === 'check_items' ? {} :
                                        action.type === 'credit_card' ? { format: 'credit_card' } :
                                            action.type === 'cuid2' ? { format: 'cuid2' } :
                                                action.type === 'decimal' ? { format: 'decimal' } :
                                                    action.type === 'description' ? { description: action.description } :
                                                        action.type === 'digits' ? { format: 'digits' } :
                                                            action.type === 'email' ? { format: 'email' } :
                                                                action.type === 'emoji' ? { format: 'emoji' } :
                                                                    action.type === 'empty' ? (type.type === 'array' ? { maxItems: 0 } :
                                                                        type.type === 'string' ? { maxLength: 0 } :
                                                                            {}) :
                                                                        action.type === 'ends_with' ? { pattern: `${action.requirement}$` } :
                                                                            action.type === 'every_item' ? {} :
                                                                                action.type === 'excludes' ? {} :
                                                                                    action.type === 'filter_items' ? {} :
                                                                                        action.type === 'find_items' ? {} :
                                                                                            action.type === 'finite' ? {} :
                                                                                                action.type === 'graphemes' ? {} :
                                                                                                    action.type === 'hash' ? {} :
                                                                                                        action.type === 'hexadecimal' ? {} :
                                                                                                            action.type === 'hex_color' ? {} :
                                                                                                                action.type === 'imei' ? {} :
                                                                                                                    action.type === 'includes' ? (type.type === 'array' ? { contains: t.Literal(action.requirement) } :
                                                                                                                        type.type === 'string' ? { pattern: action.requirement } :
                                                                                                                            {}) :
                                                                                                                        action.type === 'integer' ? { multipleOf: 1 } :
                                                                                                                            action.type === 'ip' ? { format: 'ip' } :
                                                                                                                                action.type === 'ipv4' ? { format: 'ipv4' } :
                                                                                                                                    action.type === 'ipv6' ? { format: 'ipv6' } :
                                                                                                                                        action.type === 'iso_date' ? { format: 'iso_date' } :
                                                                                                                                            action.type === 'iso_date_time' ? { format: 'iso_date_time' } :
                                                                                                                                                action.type === 'iso_time' ? { format: 'iso_time' } :
                                                                                                                                                    action.type === 'iso_time_second' ? { format: 'iso_time_second' } :
                                                                                                                                                        action.type === 'iso_timestamp' ? { format: 'iso_timestamp' } :
                                                                                                                                                            action.type === 'iso_week' ? { format: 'iso_week' } :
                                                                                                                                                                action.type === 'length' ? (type.type === 'string' ? { minLength: action.requirement, maxLength: action.requirement } :
                                                                                                                                                                    type.type === 'array' ? { minItems: action.requirement, maxItems: action.requirement } :
                                                                                                                                                                        {}) :
                                                                                                                                                                    action.type === 'mac' ? { format: 'mac' } :
                                                                                                                                                                        action.type === 'mac48' ? { format: 'mac48' } :
                                                                                                                                                                            action.type === 'mac64' ? { format: 'mac64' } :
                                                                                                                                                                                action.type === 'map_items' ? {} :
                                                                                                                                                                                    action.type === 'max_bytes' ? {} :
                                                                                                                                                                                        action.type === 'max_graphemes' ? {} :
                                                                                                                                                                                            action.type === 'max_length' ? (type.type === 'string' ? { maxLength: action.requirement } :
                                                                                                                                                                                                type.type === 'array' ? { maxItems: action.requirement } :
                                                                                                                                                                                                    {}) :
                                                                                                                                                                                                action.type === 'max_size' ? {} :
                                                                                                                                                                                                    action.type === 'max_value' ? { maximum: action.requirement } :
                                                                                                                                                                                                        action.type === 'max_words' ? {} :
                                                                                                                                                                                                            action.type === 'metadata' ? { metadata: action.metadata } :
                                                                                                                                                                                                                action.type === 'mime_type' ? {} :
                                                                                                                                                                                                                    action.type === 'min_bytes' ? {} :
                                                                                                                                                                                                                        action.type === 'min_graphemes' ? {} :
                                                                                                                                                                                                                            action.type === 'min_length' ? (type.type === 'string' ? { minLength: action.requirement } :
                                                                                                                                                                                                                                type.type === 'array' ? { minItems: action.requirement } :
                                                                                                                                                                                                                                    {}) :
                                                                                                                                                                                                                                action.type === 'min_size' ? {} :
                                                                                                                                                                                                                                    action.type === 'min_value' ? { minimum: action.requirement } :
                                                                                                                                                                                                                                        action.type === 'min_words' ? {} :
                                                                                                                                                                                                                                            action.type === 'multiple_of' ? { multipleOf: action.requirement } :
                                                                                                                                                                                                                                                action.type === 'nanoid' ? { format: 'nanoid' } :
                                                                                                                                                                                                                                                    action.type === 'non_empty' ? {} :
                                                                                                                                                                                                                                                        action.type === 'normalize' ? {} :
                                                                                                                                                                                                                                                            action.type === 'not_bytes' ? {} :
                                                                                                                                                                                                                                                                action.type === 'not_graphemes' ? {} :
                                                                                                                                                                                                                                                                    action.type === 'not_length' ? {} : // needs TNot
                                                                                                                                                                                                                                                                        action.type === 'not_size' ? {} :
                                                                                                                                                                                                                                                                            action.type === 'not_value' ? {} :
                                                                                                                                                                                                                                                                                action.type === 'not_words' ? {} :
                                                                                                                                                                                                                                                                                    action.type === 'octal' ? { format: 'octal' } :
                                                                                                                                                                                                                                                                                        action.type === 'partial_check' ? {} :
                                                                                                                                                                                                                                                                                            action.type === 'raw_check' ? {} :
                                                                                                                                                                                                                                                                                                action.type === 'raw_transform' ? {} :
                                                                                                                                                                                                                                                                                                    action.type === 'readonly' ? {} :
                                                                                                                                                                                                                                                                                                        action.type === 'reduce_items' ? {} :
                                                                                                                                                                                                                                                                                                            action.type === 'regex' ? { pattern: action.requirement.source } :
                                                                                                                                                                                                                                                                                                                action.type === 'returns' ? {} :
                                                                                                                                                                                                                                                                                                                    action.type === 'safe_integer' ? { multipleOf: 1 } :
                                                                                                                                                                                                                                                                                                                        action.type === 'size' ? {} :
                                                                                                                                                                                                                                                                                                                            action.type === 'some_item' ? {} :
                                                                                                                                                                                                                                                                                                                                action.type === 'sort_items' ? {} :
                                                                                                                                                                                                                                                                                                                                    action.type === 'starts_with' ? { pattern: `^${action.requirement}` } :
                                                                                                                                                                                                                                                                                                                                        action.type === 'title' ? { title: action.title } :
                                                                                                                                                                                                                                                                                                                                            action.type === 'to_lower_case' ? {} :
                                                                                                                                                                                                                                                                                                                                                action.type === 'to_max_value' ? {} :
                                                                                                                                                                                                                                                                                                                                                    action.type === 'to_min_value' ? {} :
                                                                                                                                                                                                                                                                                                                                                        action.type === 'to_upper_case' ? {} :
                                                                                                                                                                                                                                                                                                                                                            action.type === 'transform' ? {} :
                                                                                                                                                                                                                                                                                                                                                                action.type === 'trim' ? {} :
                                                                                                                                                                                                                                                                                                                                                                    action.type === 'trim_end' ? {} :
                                                                                                                                                                                                                                                                                                                                                                        action.type === 'trim_start' ? {} :
                                                                                                                                                                                                                                                                                                                                                                            action.type === 'ulid' ? { format: 'ulid' } :
                                                                                                                                                                                                                                                                                                                                                                                action.type === 'url' ? { format: 'url' } :
                                                                                                                                                                                                                                                                                                                                                                                    action.type === 'uuid' ? { format: 'uuid' } :
                                                                                                                                                                                                                                                                                                                                                                                        action.type === 'value' ? {} :
                                                                                                                                                                                                                                                                                                                                                                                            action.type === 'words' ? {} :
                                                                                                                                                                                                                                                                                                                                                                                                {})
        };
    }, {});
}
// ------------------------------------------------------------------
// Formats
// ------------------------------------------------------------------
t.FormatRegistry.Set('base64', (value) => v.safeParse(v.pipe(v.string(), v.base64()), value).success);
t.FormatRegistry.Set('bic', (value) => v.safeParse(v.pipe(v.string(), v.bic()), value).success);
t.FormatRegistry.Set('credit_card', (value) => v.safeParse(v.pipe(v.string(), v.creditCard()), value).success);
t.FormatRegistry.Set('cuid2', (value) => v.safeParse(v.pipe(v.string(), v.cuid2()), value).success);
t.FormatRegistry.Set('decimal', (value) => v.safeParse(v.pipe(v.string(), v.decimal()), value).success);
t.FormatRegistry.Set('digits', (value) => v.safeParse(v.pipe(v.string(), v.digits()), value).success);
t.FormatRegistry.Set('email', (value) => v.safeParse(v.pipe(v.string(), v.email()), value).success);
t.FormatRegistry.Set('emoji', (value) => v.safeParse(v.pipe(v.string(), v.emoji()), value).success);
t.FormatRegistry.Set('ip', (value) => v.safeParse(v.pipe(v.string(), v.ip()), value).success);
t.FormatRegistry.Set('ipv4', (value) => v.safeParse(v.pipe(v.string(), v.ipv4()), value).success);
t.FormatRegistry.Set('ipv6', (value) => v.safeParse(v.pipe(v.string(), v.ipv6()), value).success);
t.FormatRegistry.Set('iso_date', (value) => v.safeParse(v.pipe(v.string(), v.isoDate()), value).success);
t.FormatRegistry.Set('iso_date_time', (value) => v.safeParse(v.pipe(v.string(), v.isoDateTime()), value).success);
t.FormatRegistry.Set('iso_time', (value) => v.safeParse(v.pipe(v.string(), v.isoTime()), value).success);
t.FormatRegistry.Set('iso_time_second', (value) => v.safeParse(v.pipe(v.string(), v.isoTimeSecond()), value).success);
t.FormatRegistry.Set('iso_timestamp', (value) => v.safeParse(v.pipe(v.string(), v.isoTimestamp()), value).success);
t.FormatRegistry.Set('iso_week', (value) => v.safeParse(v.pipe(v.string(), v.isoWeek()), value).success);
t.FormatRegistry.Set('mac', (value) => v.safeParse(v.pipe(v.string(), v.mac()), value).success);
t.FormatRegistry.Set('mac48', (value) => v.safeParse(v.pipe(v.string(), v.mac48()), value).success);
t.FormatRegistry.Set('mac64', (value) => v.safeParse(v.pipe(v.string(), v.mac64()), value).success);
t.FormatRegistry.Set('nanoid', (value) => v.safeParse(v.pipe(v.string(), v.nanoid()), value).success);
t.FormatRegistry.Set('octal', (value) => v.safeParse(v.pipe(v.string(), v.octal()), value).success);
t.FormatRegistry.Set('ulid', (value) => v.safeParse(v.pipe(v.string(), v.ulid()), value).success);
t.FormatRegistry.Set('url', (value) => v.safeParse(v.pipe(v.string(), v.url()), value).success);
t.FormatRegistry.Set('uuid', (value) => v.safeParse(v.pipe(v.string(), v.uuid()), value).success);
function FromAny(type) {
    return t.Any(Options(type));
}
function FromArray(type) {
    return t.Array(FromType(type.item), Options(type));
}
function FromBigInt(type) {
    return t.BigInt(Options(type));
}
// ------------------------------------------------------------------
// Blob
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotBlob', (schema, value) => {
    return v.safeParse(schema.schema, value).success;
});
function _Blob(type, options) {
    return t.CreateType({ [t.Kind]: 'ValibotBlob', type }, options);
}
function FromBlob(type) {
    return _Blob(type, Options(type));
}
function FromBoolean(type) {
    return t.Boolean(Options(type));
}
// ------------------------------------------------------------------
// Custom
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotCustom', (schema, value) => v.safeParse(schema.schema, value).success);
function Custom(type, options) {
    return t.CreateType({ [t.Kind]: 'ValibotCustom', type }, options);
}
function FromCustom(type) {
    return Custom(type, Options(type));
}
function FromDate(type) {
    return t.Date(Options(type));
}
// ------------------------------------------------------------------
// Enum
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotEnum', (schema, value) => {
    return v.safeParse(schema.type, value).success;
});
function ValibotEnum(type, options) {
    return t.CreateType({ [t.Kind]: 'ValibotEnum', type }, options);
}
function FromEnum(type) {
    return ValibotEnum(type, Options(type));
}
// ------------------------------------------------------------------
// File
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotFile', (schema, value) => {
    return v.safeParse(schema.schema, value).success;
});
function _File(type, options) {
    return t.CreateType({ [t.Kind]: 'ValibotFile', type }, options);
}
function FromFile(type) {
    return _File(type, Options(type));
}
// ------------------------------------------------------------------
// Function
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotFunction', (schema, value) => {
    return v.safeParse(schema.schema, value).success;
});
function _Function(type, options) {
    return t.CreateType({ [t.Kind]: 'ValibotFunction', type }, options);
}
function FromFunction(type) {
    return _Function(type, Options(type));
}
// ------------------------------------------------------------------
// Instance
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotInstance', (schema, value) => {
    return v.safeParse(schema.schema, value).success;
});
function Instance(type, options) {
    return t.CreateType({ [t.Kind]: 'ValibotInstance', type }, options);
}
function FromInstance(type) {
    return Instance(type, Options(type));
}
function FromIntersect(type) {
    const intersect = type;
    return t.Intersect(intersect.options.map((option) => FromType(option)), Options(type));
}
function FromLiteral(type) {
    const literal = type;
    return t.Literal(literal.literal, Options(type));
}
function FromLooseObject(type) {
    const object = type;
    const keys = globalThis.Object.getOwnPropertyNames(object.entries);
    return t.Object(keys.reduce((properties, key) => {
        return { ...properties, [key]: FromType(object.entries[key]) };
    }, {}), Options(type));
}
// ------------------------------------------------------------------
// LooseTuple
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotLooseTuple', (schema, value) => {
    return v.safeParse(schema.schema, value).success;
});
function LooseTuple(type, schema) {
    return t.CreateType({ [t.Kind]: 'ValibotLooseTuple', type });
}
function FromLooseTuple(type) {
    return LooseTuple(type, Options(type));
}
// ------------------------------------------------------------------
// Map
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotMap', (schema, value) => {
    return v.safeParse(schema.schema, value).success;
});
function _Map(type, options) {
    return t.CreateType({ [t.Kind]: 'ValibotMap', type });
}
function FromMap(type) {
    return _Map(type, Options(type));
}
// ------------------------------------------------------------------
// NaN
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotNaN', (schema, value) => {
    return v.safeParse(schema.schema, value).success;
});
function _NaN(type, options) {
    return t.CreateType({ [t.Kind]: 'ValibotNaN', type }, options);
}
function FromNaN(type) {
    return _NaN(type, Options(type));
}
function FromNever(type) {
    return t.Never(Options(type));
}
function FromNonNullable(type) {
    const non_nullable = type;
    return t.Exclude(FromType(non_nullable.wrapped), t.Null(), Options(type));
}
function FromNonNullish(type) {
    const non_nullish = type;
    return t.Exclude(FromType(non_nullish.wrapped), t.Union([t.Null(), t.Undefined()]), Options(type));
}
function FromNonOptional(type) {
    const non_optional = type;
    return t.Optional(FromType(non_optional.wrapped), false);
}
function FromNull(type) {
    return t.Null(Options(type));
}
function FromNullable(type) {
    const nullable = type;
    return t.Union([t.Null(), FromType(nullable.wrapped)], Options(type));
}
function FromNullish(type) {
    const nullish = type;
    return t.Union([FromType(nullish.wrapped), t.Null(), t.Undefined()], Options(type));
}
function FromNumber(type) {
    return t.Number(Options(type));
}
function FromObject(type) {
    const object = type;
    const keys = globalThis.Object.getOwnPropertyNames(object.entries);
    return t.Object(keys.reduce((properties, key) => {
        return { ...properties, [key]: FromType(object.entries[key]) };
    }, {}), Options(type));
}
function FromObjectWithRest(type) {
    const object = type;
    const keys = globalThis.Object.getOwnPropertyNames(object.entries);
    return t.Object(keys.reduce((properties, key) => {
        return { ...properties, [key]: FromType(object.entries[key]) };
    }, {}), { ...Options(type), additionalProperties: FromType(object.rest) });
}
function FromOptional(type) {
    const optional = type;
    return t.Optional(FromType(optional.wrapped));
}
function FromPickList(type) {
    const picklist = type;
    return t.Union(picklist.options.map((option) => t.Literal(option)), Options(type));
}
// ------------------------------------------------------------------
// Promise
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotPromise', (schema, value) => {
    return v.safeParse(schema.schema, value).success;
});
function _Promise(type, options) {
    return t.CreateType({ [t.Kind]: 'ValibotPromise', type }, options);
}
function FromPromise(type) {
    return _Promise(type, Options(type));
}
function FromRecord(type) {
    const record = type;
    return t.Record(FromType(record.key), FromType(record.value), Options(type));
}
// ------------------------------------------------------------------
// Set
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotSet', (schema, value) => {
    return v.safeParse(schema.schema, value).success;
});
function Set(type, options) {
    return t.CreateType({ [t.Kind]: 'ValibotSet', type }, options);
}
function FromSet(type) {
    return Set(type);
}
function FromStrictObject(type) {
    const object = type;
    const keys = globalThis.Object.getOwnPropertyNames(object.entries);
    return t.Object(keys.reduce((properties, key) => {
        return { ...properties, [key]: FromType(object.entries[key]) };
    }, {}), { ...Options(type), additionalProperties: false });
}
function FromStrictTuple(type) {
    const tuple = type;
    const items = globalThis.Array.isArray(tuple.items) ? tuple.items.map((item) => FromType(item)) : [];
    return t.Tuple(items, Options(type));
}
function FromString(type) {
    return t.String(Options(type));
}
function FromSymbol(type) {
    return t.Symbol(Options(type));
}
function FromTuple(type) {
    const tuple = type;
    const items = globalThis.Array.isArray(tuple.items) ? tuple.items.map((item) => FromType(item)) : [];
    return t.Tuple(items, Options(type));
}
// ------------------------------------------------------------------
// TupleWithRest
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotTupleWithRest', (schema, value) => {
    return v.safeParse(schema.schema, value).success;
});
function TupleWithRest(type, options) {
    return t.CreateType({ [t.Kind]: 'ValibotTupleWithRest', type }, Options(type));
}
function FromTupleWithRest(type) {
    return TupleWithRest(type, Options(type));
}
function FromUndefined(type) {
    return t.Undefined(Options(type));
}
function FromUndefinedable(type) {
    const undefinedable = type;
    return t.Union([FromType(undefinedable.wrapped), t.Undefined()], Options(type));
}
function FromUnion(type) {
    const variants = type.options.map((option) => FromType(option));
    return t.Union(variants, Options(type));
}
function FromUnknown(type) {
    return t.Unknown(Options(type));
}
// ------------------------------------------------------------------
// Variant
// ------------------------------------------------------------------
t.TypeRegistry.Set('ValibotVariant', (schema, value) => {
    return v.safeParse(schema.schema, value).success;
});
function Variant(type) {
    return t.CreateType({ [t.Kind]: 'ValibotVariant', type }, Options(type));
}
function FromVariant(type) {
    return Variant(type);
}
function FromVoid(type) {
    return t.Void(Options(type));
}
// prettier-ignore
function FromType(type) {
    return (type.type === 'any' ? FromAny(type) :
        type.type === 'array' ? FromArray(type) :
            type.type === 'bigint' ? FromBigInt(type) :
                type.type === 'blob' ? FromBlob(type) :
                    type.type === 'boolean' ? FromBoolean(type) :
                        type.type === 'custom' ? FromCustom(type) :
                            type.type === 'date' ? FromDate(type) :
                                type.type === 'enum' ? FromEnum(type) :
                                    type.type === 'file' ? FromFile(type) :
                                        type.type === 'function' ? FromFunction(type) :
                                            type.type === 'intersect' ? FromIntersect(type) :
                                                type.type === 'instance' ? FromInstance(type) :
                                                    type.type === 'literal' ? FromLiteral(type) :
                                                        type.type === 'loose_object' ? FromLooseObject(type) :
                                                            type.type === 'loose_tuple' ? FromLooseTuple(type) :
                                                                type.type === 'map' ? FromMap(type) :
                                                                    type.type === 'nan' ? FromNaN(type) :
                                                                        type.type === 'never' ? FromNever(type) :
                                                                            type.type === 'non_nullable' ? FromNonNullable(type) :
                                                                                type.type === 'non_nullish' ? FromNonNullish(type) :
                                                                                    type.type === 'non_optional' ? FromNonOptional(type) :
                                                                                        type.type === 'null' ? FromNull(type) :
                                                                                            type.type === 'nullable' ? FromNullable(type) :
                                                                                                type.type === 'nullish' ? FromNullish(type) :
                                                                                                    type.type === 'number' ? FromNumber(type) :
                                                                                                        type.type === 'object' ? FromObject(type) :
                                                                                                            type.type === 'object_with_rest' ? FromObjectWithRest(type) :
                                                                                                                type.type === 'optional' ? FromOptional(type) :
                                                                                                                    type.type === 'picklist' ? FromPickList(type) :
                                                                                                                        type.type === 'promise' ? FromPromise(type) :
                                                                                                                            type.type === 'record' ? FromRecord(type) :
                                                                                                                                type.type === 'string' ? FromString(type) :
                                                                                                                                    type.type === 'set' ? FromSet(type) :
                                                                                                                                        type.type === 'strict_object' ? FromStrictObject(type) :
                                                                                                                                            type.type === 'strict_tuple' ? FromStrictTuple(type) :
                                                                                                                                                type.type === 'symbol' ? FromSymbol(type) :
                                                                                                                                                    type.type === 'tuple_with_rest' ? FromTupleWithRest(type) :
                                                                                                                                                        type.type === 'tuple' ? FromTuple(type) :
                                                                                                                                                            type.type === 'undefined' ? FromUndefined(type) :
                                                                                                                                                                type.type === 'undefinedable' ? FromUndefinedable(type) :
                                                                                                                                                                    type.type === 'unknown' ? FromUnknown(type) :
                                                                                                                                                                        type.type === 'union' ? FromUnion(type) :
                                                                                                                                                                            type.type === 'variant' ? FromVariant(type) :
                                                                                                                                                                                type.type === 'void' ? FromVoid(type) :
                                                                                                                                                                                    t.Never());
}
/** Creates a TypeBox type from Valibot */
// prettier-ignore
function TypeBoxFromValibot(type) {
    return FromType(type);
}
