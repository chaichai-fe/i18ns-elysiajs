import * as t from '@sinclair/typebox';
import * as v from 'valibot';
import * as z from 'zod';
/** Structural Type for Syntax */
export type SyntaxType = string;
/** Structural Type for TypeBox */
export type TypeBoxType = t.TSchema;
/** Structural Type for Valibot */
export type ValibotType = v.BaseSchema<any, any, v.BaseIssue<any>>;
/** Structural Type for Zod */
export type ZodType = z.ZodTypeAny | z.ZodEffects<any>;
/** Returns true if the given value is a Syntax type */
export declare function IsSyntax(value: unknown): value is string;
/** Returns true if the given value is a TypeBox type */
export declare function IsTypeBox(type: unknown): type is t.TSchema;
/** Returns true if the given value is a Valibot type */
export declare function IsValibot(type: unknown): type is v.AnySchema;
/** Returns true if the given value is a Zod type */
export declare function IsZod(type: unknown): type is z.ZodTypeAny;
/** Resolve common mapping signature parameters */
export declare function Signature(args: any[]): [parameter: Record<PropertyKey, object>, type: string | object, options: object];
