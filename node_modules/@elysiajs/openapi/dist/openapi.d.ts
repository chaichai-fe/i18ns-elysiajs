import { type AnyElysia, type TSchema } from 'elysia';
import type { OpenAPIV3 } from 'openapi-types';
import { type TProperties } from '@sinclair/typebox';
import type { AdditionalReferences, ElysiaOpenAPIConfig } from './types';
export declare const capitalize: (word: string) => string;
/**
 * Get all possible paths of a path with optional parameters
 * @param {string} path
 * @returns {string[]} paths
 */
export declare const getPossiblePath: (path: string) => string[];
export declare const getLoosePath: (path: string) => string;
/**
 * Converts Elysia routes to OpenAPI 3.0.3 paths schema
 * @param routes Array of Elysia route objects
 * @returns OpenAPI paths object
 */
export declare function toOpenAPISchema(app: AnyElysia, exclude?: ElysiaOpenAPIConfig['exclude'], references?: AdditionalReferences): {
    components: {
        schemas: Record<string, TSchema>;
    };
    paths: OpenAPIV3.PathsObject<{}, {}>;
};
export declare const withHeaders: (schema: TSchema, headers: TProperties) => TSchema & {
    headers: TProperties;
};
