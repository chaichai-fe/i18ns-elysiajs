"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/gen/index.ts
var gen_exports = {};
__export(gen_exports, {
  fromTypes: () => fromTypes
});
module.exports = __toCommonJS(gen_exports);
var import_fs = require("fs");
var import_typemap = require("@sinclair/typemap");
var import_os = require("os");
var import_path = require("path");
var import_child_process = require("child_process");
var matchRoute = /: Elysia<(.*)>/gs;
var matchStatus = /(\d{3}):/g;
var wrapStatusInQuote = (value) => value.replace(matchStatus, '"$1":');
var fromTypes = (targetFilePath, {
  tsconfigPath = "tsconfig.json",
  instanceName,
  projectRoot = process.cwd(),
  overrideOutputPath,
  debug = false
} = {}) => () => {
  const tmpRoot = (0, import_path.join)((0, import_os.tmpdir)(), ".ElysiaAutoOpenAPI");
  try {
    if (!targetFilePath.endsWith(".ts") && !targetFilePath.endsWith(".tsx"))
      throw new Error("Only .ts files are supported");
    if (targetFilePath.startsWith("./"))
      targetFilePath = targetFilePath.slice(2);
    let src = targetFilePath.startsWith("/") ? targetFilePath : (0, import_path.join)(projectRoot, targetFilePath);
    if (!(0, import_fs.existsSync)(src))
      throw new Error(
        `Couldn't find "${targetFilePath}" from ${projectRoot}`
      );
    let targetFile;
    if (targetFilePath.endsWith(".d.ts")) targetFile = targetFilePath;
    else {
      if ((0, import_fs.existsSync)(tmpRoot))
        (0, import_fs.rmSync)(tmpRoot, { recursive: true, force: true });
      (0, import_fs.mkdirSync)(tmpRoot, { recursive: true });
      const tsconfig = tsconfigPath.startsWith("/") ? tsconfigPath : (0, import_path.join)(projectRoot, tsconfigPath);
      let extendsRef = (0, import_fs.existsSync)(tsconfig) ? `"extends": "${(0, import_path.join)(projectRoot, "tsconfig.json")}",` : "";
      if (typeof process !== "undefined" && process.platform === "win32") {
        extendsRef = extendsRef.replace(/\\/g, "/");
        src = src.replace(/\\/g, "/");
      }
      (0, import_fs.writeFileSync)(
        (0, import_path.join)(tmpRoot, "tsconfig.json"),
        `{
	${extendsRef}
	"compilerOptions": {
		"lib": ["ESNext"],
		"module": "ESNext",
		"noEmit": false,
		"declaration": true,
		"emitDeclarationOnly": true,
		"moduleResolution": "bundler",
		"skipLibCheck": true,
		"skipDefaultLibCheck": true,
		"outDir": "./dist"
	},
	"include": ["${src}"]
}`
      );
      (0, import_child_process.spawnSync)(`tsc`, {
        shell: true,
        cwd: tmpRoot,
        stdio: debug ? "inherit" : void 0
      });
      const fileName = targetFilePath.replace(/.tsx$/, ".ts").replace(/.ts$/, ".d.ts");
      targetFile = (overrideOutputPath ? typeof overrideOutputPath === "string" ? overrideOutputPath.startsWith("/") ? overrideOutputPath : (0, import_path.join)(tmpRoot, "dist", overrideOutputPath) : overrideOutputPath(tmpRoot) : void 0) ?? (0, import_path.join)(
        tmpRoot,
        "dist",
        // remove leading like src or something similar
        fileName.slice(fileName.indexOf("/") + 1)
      );
      let existed = (0, import_fs.existsSync)(targetFile);
      if (!existed && !overrideOutputPath) {
        targetFile = (0, import_path.join)(
          tmpRoot,
          "dist",
          // use original file name as-is eg. in monorepo
          fileName
        );
        existed = (0, import_fs.existsSync)(targetFile);
      }
      if (!existed) {
        (0, import_fs.rmSync)((0, import_path.join)(tmpRoot, "tsconfig.json"));
        console.warn(
          "[@elysiajs/openapi/gen] Failed to generate OpenAPI schema"
        );
        console.warn("Couldn't find generated declaration file");
        if ((0, import_fs.existsSync)((0, import_path.join)(tmpRoot, "dist"))) {
          const tempFiles = (0, import_fs.readdirSync)((0, import_path.join)(tmpRoot, "dist"), {
            recursive: true
          }).filter((x) => x.toString().endsWith(".d.ts")).map((x) => `- ${x}`).join("\n");
          if (tempFiles) {
            console.warn(
              "You can override with `overrideOutputPath` with one of the following:"
            );
            console.warn(tempFiles);
          }
        }
        return;
      }
    }
    const declaration = (0, import_fs.readFileSync)(targetFile, "utf8");
    if ((0, import_fs.existsSync)(tmpRoot))
      (0, import_fs.rmSync)(tmpRoot, { recursive: true, force: true });
    let instance = declaration.match(
      instanceName ? new RegExp(`${instanceName}: Elysia<(.*)`, "gs") : matchRoute
    )?.[0];
    if (!instance) return;
    for (let i = 0; i < 3; i++)
      instance = instance.slice(
        instance.indexOf(
          "}, {",
          // remove just `}, `, leaving `{`
          3
        )
      );
    const routesString = wrapStatusInQuote(
      // Intentionally not adding "}"
      // to avoid mismatched bracket in loop below
      instance.slice(3, instance.indexOf("}, {", 4))
    );
    const routes = {};
    for (const route of routesString.slice(1).split("} & {")) {
      let schema = (0, import_typemap.TypeBox)(`{${route}}`);
      if (schema.type !== "object") continue;
      const paths = [];
      while (true) {
        const keys = Object.keys(schema.properties);
        if (keys.length !== 1) break;
        paths.push(keys[0]);
        schema = schema.properties[keys[0]];
        if (!schema?.properties) break;
      }
      const method = paths.pop();
      const path = "/" + paths.join("/");
      schema = schema.properties;
      if (schema?.response?.type === "object") {
        const responseSchema = {};
        for (const key in schema.response.properties)
          responseSchema[key] = schema.response.properties[key];
        schema.response = responseSchema;
      }
      if (!routes[path]) routes[path] = {};
      routes[path][method.toLowerCase()] = schema;
    }
    return routes;
  } catch (error) {
    console.warn(
      "[@elysiajs/openapi/gen] Failed to generate OpenAPI schema"
    );
    console.warn(error);
    return;
  } finally {
    if (!debug && (0, import_fs.existsSync)(tmpRoot))
      (0, import_fs.rmSync)(tmpRoot, { recursive: true, force: true });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fromTypes
});
